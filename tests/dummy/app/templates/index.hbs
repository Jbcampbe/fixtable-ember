<div>Total Rows: {{model.dataRows.length}}</div>

<h3>No Paging</h3>
<p>This Fixtable loads and renders all of its content without any pagination.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.filteredColumnDefs content=model.dataRows
      fixtableClass='restrict-height' tableClass='table-hover'
      isLoading=noPageIsLoading}}
    <button type="button" class="btn btn-primary" {{action 'toggle' 'noPageIsLoading'}}>
      Toggle Loading
    </button>
  </div>
</div>

<h3>Client Paging</h3>
<p>This Fixtable loads all of its content at once but paginates it on the client.</p>
<p>We don't need to show the loading indicator while changing pages, since the update should be immediate.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.filteredColumnDefs content=model.dataRows
      fixtableClass='restrict-height' tableClass='table-hover'
      isLoading=clientPageIsLoading clientPaging=true}}
    <button type="button" class="btn btn-primary" {{action 'toggle' 'clientPageIsLoading'}}>
      Toggle Loading
    </button>
  </div>
</div>

<h3>Server Paging</h3>
<p>This Fixtable only loads a page at the time and relies on its owning component or controller to provide more data.</p>
<p>This example is actually still implemented on the client, but it simulates server pagination.</p>
<p>Because loading data from the server is asynchronous, we show the loading indicator while we wait to let the user know that something is happening.</p>
<div class="row">
  <div class="col-md-8">
    {{fixtable-grid columns=model.columnDefs content=model.pagedDataRows
      fixtableClass='restrict-height' tableClass='table-hover'
      isLoading=serverPageIsLoading serverPaging=true totalRowsOnServer=model.dataRows.length
      onPageChanged=(action 'updatePage') }}
    <button type="button" class="btn btn-primary" {{action 'toggle' 'serverPageIsLoading'}}>
      Toggle Loading
    </button>
  </div>
</div>
